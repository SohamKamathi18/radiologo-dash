import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { FileText, Edit, Eye, MessageSquare, Download } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ReportReviewStepProps {
  analysis: any;
  patient: any;
  onReportChange: (report: any) => void;
}

export function ReportReviewStep({ analysis, patient, onReportChange }: ReportReviewStepProps) {
  const [editedReport, setEditedReport] = useState('');
  const [isEditing, setIsEditing] = useState(false);
  const [selectedImage, setSelectedImage] = useState(0);
  const { toast } = useToast();

  useEffect(() => {
    if (analysis?.report) {
      setEditedReport(analysis.report);
      onReportChange({
        ...analysis,
        report: analysis.report,
        edited: false
      });
    }
  }, [analysis]);

  const handleReportEdit = (newText: string) => {
    setEditedReport(newText);
    onReportChange({
      ...analysis,
      report: newText,
      edited: true
    });
  };

  const saveReport = () => {
    setIsEditing(false);
    toast({
      title: "Report Saved",
      description: "Your changes have been saved successfully",
    });
  };

  const downloadReport = () => {
    const reportContent = `
MEDICAL IMAGING REPORT

Patient: ${patient?.name || 'Unknown'}
Medical ID: ${patient?.medical_id || 'N/A'}
Date: ${new Date().toLocaleDateString()}
Analysis ID: ${analysis?.analysis_id || 'N/A'}

FINDINGS:
${editedReport}

PATHOLOGIES DETECTED:
${analysis?.pathologies?.map((p: any) => 
  `- ${p.condition}: ${Math.round(p.probability * 100)}% confidence (${p.severity} severity, ${p.location})`
).join('\n') || 'None detected'}

RECOMMENDATIONS:
${analysis?.recommendations?.map((r: string) => `- ${r}`).join('\n') || 'No specific recommendations'}

---
Report generated by AI Radiology System
`;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `medical_report_${patient?.medical_id || 'unknown'}_${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Report Downloaded",
      description: "Medical report has been downloaded successfully",
    });
  };

  if (!analysis) {
    return (
      <Card>
        <CardContent className="pt-6">
          <div className="text-center text-muted-foreground">
            <FileText className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <p>No analysis data available</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5 text-primary" />
            Medical Report Review
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="report" className="w-full">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="report">Report</TabsTrigger>
              <TabsTrigger value="findings">Findings</TabsTrigger>
              <TabsTrigger value="images">Images</TabsTrigger>
            </TabsList>
            
            <TabsContent value="report" className="space-y-4">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-medium">AI Generated Report</h3>
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setIsEditing(!isEditing)}
                  >
                    {isEditing ? <Eye className="h-4 w-4 mr-2" /> : <Edit className="h-4 w-4 mr-2" />}
                    {isEditing ? 'Preview' : 'Edit'}
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={downloadReport}
                  >
                    <Download className="h-4 w-4 mr-2" />
                    Download
                  </Button>
                </div>
              </div>

              {isEditing ? (
                <div className="space-y-4">
                  <Textarea
                    value={editedReport}
                    onChange={(e) => handleReportEdit(e.target.value)}
                    className="min-h-[400px] font-mono text-sm"
                    placeholder="Edit the medical report..."
                  />
                  <div className="flex gap-2">
                    <Button onClick={saveReport}>
                      Save Changes
                    </Button>
                    <Button 
                      variant="outline" 
                      onClick={() => {
                        setEditedReport(analysis.report);
                        setIsEditing(false);
                      }}
                    >
                      Cancel
                    </Button>
                  </div>
                </div>
              ) : (
                <Card className="bg-muted/50">
                  <CardContent className="pt-4">
                    <pre className="whitespace-pre-wrap text-sm leading-relaxed">
                      {editedReport}
                    </pre>
                  </CardContent>
                </Card>
              )}
            </TabsContent>

            <TabsContent value="findings" className="space-y-4">
              <h3 className="text-lg font-medium">Detected Pathologies</h3>
              
              {analysis.pathologies && analysis.pathologies.length > 0 ? (
                <div className="space-y-4">
                  {analysis.pathologies.map((pathology: any, index: number) => (
                    <Card key={index}>
                      <CardContent className="pt-4">
                        <div className="flex items-start justify-between">
                          <div className="space-y-2">
                            <div className="flex items-center gap-2">
                              <h4 className="font-medium text-lg">{pathology.condition}</h4>
                              <Badge 
                                variant={pathology.probability > 0.7 ? "destructive" : "secondary"}
                              >
                                {Math.round(pathology.probability * 100)}% confidence
                              </Badge>
                            </div>
                            <div className="text-sm text-muted-foreground">
                              <p><strong>Location:</strong> {pathology.location}</p>
                              <p><strong>Severity:</strong> {pathology.severity}</p>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <Card>
                  <CardContent className="pt-4">
                    <p className="text-muted-foreground text-center">No pathologies detected</p>
                  </CardContent>
                </Card>
              )}

              {analysis.recommendations && analysis.recommendations.length > 0 && (
                <>
                  <Separator />
                  <div>
                    <h4 className="font-medium mb-3">AI Recommendations</h4>
                    <ul className="space-y-2">
                      {analysis.recommendations.map((recommendation: string, index: number) => (
                        <li key={index} className="flex items-start gap-2">
                          <MessageSquare className="h-4 w-4 text-primary mt-0.5 flex-shrink-0" />
                          <span className="text-sm">{recommendation}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                </>
              )}
            </TabsContent>

            <TabsContent value="images" className="space-y-4">
              <h3 className="text-lg font-medium">Medical Images</h3>
              
              <Card>
                <CardContent className="pt-4">
                  <div className="text-center space-y-4">
                    <div className="w-full h-64 bg-muted/50 rounded-lg flex items-center justify-center">
                      <div className="text-muted-foreground">
                        <FileText className="h-12 w-12 mx-auto mb-2" />
                        <p>Image viewer placeholder</p>
                        <p className="text-sm">DICOM/Image processing would be displayed here</p>
                      </div>
                    </div>
                    
                    {analysis.segmentation_map && (
                      <div className="text-sm text-muted-foreground">
                        <p>Segmentation map available: {analysis.segmentation_map}</p>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
}